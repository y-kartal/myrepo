pipeline {
    agent any

    environment {
        // DockerHub ve GitHub kimlik bilgileri
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'  // DockerHub kimlik bilgileri ID
        GITHUB_CREDENTIALS = 'github-credentials'          // GitHub kimlik bilgileri ID
        DOCKER_IMAGE_MYSQL = "yasinkartal/mysql:latest"
        DOCKER_IMAGE_PMA = "yasinkartal/phpmyadmin:latest"
        CHART_DIR = './'  // Helm chart dosyanızın yolu (tek chart kullanıyoruz)
        KUBECONFIG = '/etc/rancher/k3s/k3s.yaml'  // K3s Kubernetes kubeconfig dosyasının yolu
        NAMESPACE = 'mysql-test'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Docker imajlarını oluşturma
                    sh 'docker build -t ${DOCKER_IMAGE_MYSQL} -f Dockerfile/Dockerfile-mysql .'
                    sh 'docker build -t ${DOCKER_IMAGE_PMA} -f Dockerfile/Dockerfile-phpMyAdmin .'
                }
            }
        }

        stage('Push Docker Images to DockerHub') {
            steps {
                script {
                    // DockerHub'a giriş yapıp imajları push etme
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                    sh 'docker push ${DOCKER_IMAGE_MYSQL}'
                    sh 'docker push ${DOCKER_IMAGE_PMA}'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh 'kubectl config view --kubeconfig=${KUBECONFIG}'

                    // Namespace kontrol ve yaratma
                    sh 'kubectl get namespace ${NAMESPACE} --kubeconfig=${KUBECONFIG} || kubectl create namespace ${NAMESPACE} --kubeconfig=${KUBECONFIG}'

                    // Tek helm upgrade --install ile tüm chart'ı deploy et
                    sh 'helm upgrade --install mysql ${CHART_DIR} --kubeconfig=${KUBECONFIG} --namespace ${NAMESPACE}'
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    // Yerel imajları temizleme
                    sh 'docker rmi ${DOCKER_IMAGE_MYSQL} ${DOCKER_IMAGE_PMA} || true'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline tamamlandı.'
        }
    }
}
