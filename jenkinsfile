pipeline {
    agent any

    environment {
        // DockerHub ve GitHub kimlik bilgileri
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'  // DockerHub kimlik bilgileri ID
        GITHUB_CREDENTIALS = 'github-credentials'          // GitHub kimlik bilgileri ID
        DOCKER_IMAGE_MYSQL = "yasinkartal/mysql:latest"
        DOCKER_IMAGE_PMA = "yasinkartal/phpmyadmin:latest"
        CHART_DIR = './'  // Helm chart dosyanızın yolu
        KUBECONFIG = '/etc/rancher/k3s/k3s.yaml'  // Kubernetes kubeconfig dosyası
        NAMESPACE = 'mysql-test'  // Kullanılacak namespace
    }

    stages {

        stage('Checkout') {
            steps {
                echo "Checking out source code..."
                checkout scm
            }
        }

        stage('Build Docker Images') {
            steps {
                echo "Building Docker images..."
                script {
                    sh 'docker build -t ${DOCKER_IMAGE_MYSQL} -f Dockerfile/Dockerfile-mysql .'
                    sh 'docker build -t ${DOCKER_IMAGE_PMA} -f Dockerfile/Dockerfile-phpMyAdmin .'
                }
            }
        }

        stage('Run Automated Tests') {
            steps {
                echo "Running automated tests..."
                script {
                    // Basit bir test örneği: container yapısını doğrulama
                    sh 'docker run --rm ${DOCKER_IMAGE_MYSQL} echo "MySQL Image Test Passed!"'
                    sh 'docker run --rm ${DOCKER_IMAGE_PMA} echo "phpMyAdmin Image Test Passed!"'
                }
            }
        }

        stage('Push Docker Images to DockerHub') {
            steps {
                echo "Pushing images to DockerHub..."
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                    sh 'docker push ${DOCKER_IMAGE_MYSQL}'
                    sh 'docker push ${DOCKER_IMAGE_PMA}'
                }
            }
        }

        stage('Deploy to Remote Kubernetes') {
            steps {
                echo "Deploying to remote Kubernetes cluster..."
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-remote', variable: 'KUBECONFIG_FILE')]) {
                        sh '''
                            export KUBECONFIG=$KUBECONFIG_FILE
                            kubectl config get-contexts
                            helm upgrade --install mysql ${CHART_DIR} --namespace ${NAMESPACE} --create-namespace
                        '''
                    }
                }
            }
        }



        stage('Clean Up') {
            steps {
                echo "Cleaning up local Docker images..."
                script {
                    sh 'docker rmi ${DOCKER_IMAGE_MYSQL} ${DOCKER_IMAGE_PMA} || true'
                }
            }
        }
    }

    post {
        always {
            echo '✅ Pipeline tamamlandı!'
        }
        failure {
            echo '❌ Pipeline başarısız oldu.'
        }
    }
}
